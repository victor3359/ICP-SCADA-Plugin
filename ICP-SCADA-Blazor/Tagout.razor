@page "/tagoutList"

@using ICP_SCADA_Blazor.Data

@inject TagoutService TagoutService
@inject IJSRuntime JsRuntime
@inject IModalService Modal

<h1>iControl Tagout Plugin</h1>

@if (TagoutList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Button Type="submit" @onclick="AddTagout">Add Tagout</Button>
    <Button Type="button" @onclick="SetAutoUnselectTimming">Set AutoUnselect Timming</Button>

    <table class="table">
        <thead>
            <tr>
                <th>Index</th>
                <th>Tagout Item</th>
                <th>Datetime</th>
                <th>Reason</th>
                <th>Comment</th>
                <th>Owner</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Tagout in TagoutList)
            {
                <tr @onclick="AddTagout">
                    <td>@Tagout.Index</td>
                    <td>@Tagout.item</td>
                    <td>@Tagout.Datetime</td>
                    <td>@Tagout.Reason</td>
                    <td>@Tagout.Comment</td>
                    <td>@Tagout.Owner</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private TagoutList[] TagoutList;

    protected override async Task OnInitializedAsync()
    {
        TagoutList = await TagoutService.GetTagoutListAsync();
    }

    private async Task AddTagout()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            DateTime datetime = DateTime.Now;
            TagoutList tagoutItem = new TagoutList
            {
                Index = 10,
                item = "Ind6",
                Datetime = datetime,
                Reason = @"Tagout",
                Comment = @"",
                Owner = @"Victor"
            };
            TagoutService.AddTagoutList(tagoutItem);
            TagoutList = await TagoutService.GetTagoutListAsync();
        }
    }

    private async Task SetAutoUnselectTimming()
    {
    }
}

